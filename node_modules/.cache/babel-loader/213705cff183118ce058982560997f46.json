{"ast":null,"code":"import HOSTAPI from '../hostapi';\n\nclass RequestAPI {\n  constructor(method, body, isAuth, url) {\n    this.method = method;\n    this.body = body;\n    this.isAuth = isAuth;\n    this.url = url;\n  }\n\n  async exec() {\n    return await this.myFetch(HOSTAPI + this.url);\n  }\n\n  async myFetch(uri) {\n    let myHeaders;\n    let config;\n\n    if (this.isAuth) {\n      let auth = JSON.parse(sessionStorage.getItem('auth'));\n      if (auth != null) myHeaders = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + auth.token\n      };else myHeaders = {\n        'Content-Type': 'application/json'\n      };\n    } else myHeaders = {\n      'Content-Type': 'application/json'\n    };\n\n    if (this.method === 'GET') config = {\n      method: this.method,\n      headers: myHeaders\n    };else config = {\n      method: this.method,\n      headers: myHeaders,\n      body: JSON.stringify(this.body)\n    };\n\n    try {\n      let response = await fetch(uri, config);\n      return await response.json();\n    } catch (obje) {\n      console.log(\"[RequestAPI.js] Error\");\n    }\n  }\n\n}\n\nexport default RequestAPI;","map":{"version":3,"sources":["C:/Users/Bzt/Desktop/DOCESCOM/CursoReact/curso/src/async/requestapi.js"],"names":["HOSTAPI","RequestAPI","constructor","method","body","isAuth","url","exec","myFetch","uri","myHeaders","config","auth","JSON","parse","sessionStorage","getItem","token","headers","stringify","response","fetch","json","obje","console","log"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;;AAEA,MAAMC,UAAN,CAAgB;AACZC,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA2B;AAClC,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AACH;;AAES,QAAJC,IAAI,GAAG;AACT,WAAO,MAAM,KAAKC,OAAL,CAAaR,OAAO,GAAG,KAAKM,GAA5B,CAAb;AACH;;AAEY,QAAPE,OAAO,CAACC,GAAD,EAAM;AACf,QAAIC,SAAJ;AACA,QAAIC,MAAJ;;AACA,QAAI,KAAKN,MAAT,EAAiB;AACb,UAAIO,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAX,CAAX;AACA,UAAIJ,IAAI,IAAI,IAAZ,EACIF,SAAS,GAAG;AAAE,wBAAgB,kBAAlB;AAAsC,yBAAiB,YAAYE,IAAI,CAACK;AAAxE,OAAZ,CADJ,KAGIP,SAAS,GAAG;AAAE,wBAAgB;AAAlB,OAAZ;AACP,KAND,MAQIA,SAAS,GAAG;AAAE,sBAAgB;AAAlB,KAAZ;;AAEJ,QAAI,KAAKP,MAAL,KAAgB,KAApB,EACIQ,MAAM,GAAG;AAAER,MAAAA,MAAM,EAAE,KAAKA,MAAf;AAAwBe,MAAAA,OAAO,EAAER;AAAjC,KAAT,CADJ,KAGIC,MAAM,GAAG;AAAER,MAAAA,MAAM,EAAE,KAAKA,MAAf;AAAuBe,MAAAA,OAAO,EAAER,SAAhC;AAA2CN,MAAAA,IAAI,EAAES,IAAI,CAACM,SAAL,CAAgB,KAAKf,IAArB;AAAjD,KAAT;;AAEJ,QAAG;AACC,UAAIgB,QAAQ,GAAG,MAAMC,KAAK,CAACZ,GAAD,EAAME,MAAN,CAA1B;AACA,aAAO,MAAMS,QAAQ,CAACE,IAAT,EAAb;AACH,KAHD,CAGC,OAAMC,IAAN,EAAW;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH;AAEJ;;AArCW;;AAwChB,eAAexB,UAAf","sourcesContent":["import HOSTAPI from '../hostapi';\r\n\r\nclass RequestAPI{\r\n    constructor(method, body, isAuth, url){\r\n        this.method = method;\r\n        this.body = body;\r\n        this.isAuth = isAuth;\r\n        this.url = url;\r\n    }\r\n\r\n    async exec() {\r\n        return await this.myFetch(HOSTAPI + this.url);\r\n    }\r\n\r\n    async myFetch(uri) {\r\n        let myHeaders;\r\n        let config;\r\n        if( this.isAuth ){\r\n            let auth = JSON.parse(sessionStorage.getItem('auth'));\r\n            if( auth != null )\r\n                myHeaders = { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + auth.token }\r\n            else\r\n                myHeaders = { 'Content-Type': 'application/json' }\r\n        }\r\n        else\r\n            myHeaders = { 'Content-Type': 'application/json' }\r\n\r\n        if( this.method === 'GET' )\r\n            config = { method: this.method , headers: myHeaders }\r\n        else\r\n            config = { method: this.method, headers: myHeaders, body: JSON.stringify( this.body ) }\r\n\r\n        try{\r\n            let response = await fetch(uri, config);\r\n            return await response.json();  \r\n        }catch(obje){\r\n            console.log(\"[RequestAPI.js] Error\");\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default RequestAPI;"]},"metadata":{},"sourceType":"module"}